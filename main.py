#!/usr/bin/env python3
import os
import sys
import time
import asyncio
import logging
import requests
import gspread
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
from telethon import TelegramClient, events, errors, Button
from telethon.tl.types import InputPeerChannel, PeerUser
import openai
from tenacity import (
    retry,
    stop_after_attempt,
    wait_exponential,
    retry_if_exception_type
)

# ====== HARDENED SETTINGS ====== #
# Telegram
API_ID = ""
API_HASH = ""
PHONE = ""
SESSION_NAME = ""
CHANNEL_ID = ""
ADMIN_ID =   # –í–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
PROXY = None  # ('socks5', 'ip', port, username='', password='')
BOT_TOKEN = ""  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–ø–ø—Ä—É–≤–∞

# OpenAI
OPENAI_API_KEY = ""
GPT_MODEL = "gpt-4o"

# Google Sheets
GOOGLE_CREDS = "credentials.json"
SHEET_ID = "11qcSUsmzvUxg_8BKr4uPJSow_eXhJLOgJ1aL_QoRceo"

# Image Settings
IMAGE_BASE_DIR = "images"  # Base directory for images

# System
MAX_RETRIES = 10
FLOOD_WAIT_MAX = 300  # 5 minutes
RECONNECT_BASE_DELAY = 10
APPROVAL_TIMEOUT = 600  # 10 minutes for approval

# ====== STATE MANAGEMENT ====== #
class ApprovalState:
    def __init__(self):
        self.states = {}
        self.lock = asyncio.Lock()
    
    async def create_state(self, user_id, topic, text, image_path):
        async with self.lock:
            self.states[user_id] = {
                'topic': topic,
                'text': text,
                'image_path': image_path,
                'text_approved': False,
                'image_approved': False,
                'created_at': time.time(),
                'text_message_id': None,
                'image_message_id': None,
                'text_feedback': None,
                'image_feedback': None,
                'awaiting_feedback': None,  # 'text' –∏–ª–∏ 'image'
                'edit_history': []  # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∞–≤–æ–∫ —Ç–µ–∫—Å—Ç–∞
            }
    
    async def get_state(self, user_id):
        async with self.lock:
            return self.states.get(user_id)
    
    async def update_state(self, user_id, update_dict):
        async with self.lock:
            if user_id in self.states:
                self.states[user_id].update(update_dict)
    
    async def delete_state(self, user_id):
        async with self.lock:
            if user_id in self.states:
                del self.states[user_id]
    
    async def add_edit(self, user_id, text, feedback):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∞–≤–æ–∫"""
        async with self.lock:
            if user_id in self.states:
                self.states[user_id]['edit_history'].append({
                    'text': text,
                    'feedback': feedback,
                    'timestamp': time.time()
                })
    
    async def get_last_text_version(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞"""
        async with self.lock:
            if user_id in self.states:
                if self.states[user_id]['edit_history']:
                    return self.states[user_id]['edit_history'][-1]['text']
                return self.states[user_id]['text']
            return None
    
    async def cleanup_expired(self):
        async with self.lock:
            current_time = time.time()
            expired_users = [
                uid for uid, state in self.states.items()
                if current_time - state['created_at'] > APPROVAL_TIMEOUT
            ]
            for uid in expired_users:
                del self.states[uid]
            return len(expired_users)

# Global state manager
approval_manager = ApprovalState()

# ====== BULLETPROOF LOGGER ====== #
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)8s | %(name)12s | %(message)s',
    handlers=[
        logging.FileHandler("bot_audit.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("TerminatorBot")

# ====== ARMORED INITIALIZATION ====== #
def init_openai():
    return openai.OpenAI(api_key=OPENAI_API_KEY)

def init_openai_async():
    return openai.AsyncOpenAI(api_key=OPENAI_API_KEY)

async def create_telegram_client():
    return TelegramClient(
        session=SESSION_NAME,
        api_id=API_ID,
        api_hash=API_HASH,
        proxy=PROXY,
        connection_retries=10,
        retry_delay=3,
        auto_reconnect=True,
        device_model="Server",
        system_version="Linux/6.7.0",
        app_version="3.0"
    )

async def create_bot_client():
    client = TelegramClient(
        session='approval_bot',
        api_id=API_ID,
        api_hash=API_HASH
    )
    await client.start(bot_token=BOT_TOKEN)
    return client

# ====== FAILPROOF CORE FUNCTIONS ====== #
@retry(
    stop=stop_after_attempt(MAX_RETRIES),
    wait=wait_exponential(multiplier=1, min=4, max=60),
    retry=retry_if_exception_type(Exception)
)
def get_today_topic():
    """Nuclear-proof Google Sheets fetcher"""
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            GOOGLE_CREDS,
            ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        )
        sheet = gspread.authorize(creds).open_by_key(SHEET_ID).sheet1
        today = datetime.now().strftime("%m/%d/%Y")
        
        for row in sheet.get_all_records():
            if str(row.get('Date', '')).strip() == today:
                topic = row.get('Topic', 'No topic found')
                return topic 
        return 'No topic defined'
    except Exception as e:
        logger.error(f"Google Sheets Armageddon: {e}")
        raise

@retry(
    stop=stop_after_attempt(MAX_RETRIES),
    wait=wait_exponential(multiplier=1, min=2, max=30)
)
async def generate_text_async(topic, user_feedback=None):
    """EMP-resistant text generator with user feedback"""
    try:
        client = init_openai_async()
        
        # Base prompt
        base_prompt = f"""–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¢–ì –∫–∞–Ω–∞–ª–∞

üß† –†–æ–ª—å:

–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤ –æ –∑–¥–æ—Ä–æ–≤—å–µ, —Å–ø–æ—Ä—Ç–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏.
–¢—ã –¥–æ—Å–∫–æ–Ω–∞–ª—å–Ω–æ –∑–Ω–∞–µ—à—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ Telegram –∏ —É–º–µ–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–ø–ª—è—é—Ç –≤–∑–≥–ª—è–¥ –∏ –≤—ã–∑—ã–≤–∞—é—Ç –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å.
–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç–µ–º–∞ - {topic}

‚∏ª

üéØ –ó–∞–¥–∞—á–∞:

–°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ ¬´–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥¬ª, —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Å—Ç–∏–ª—é.

‚∏ª

üß≠ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
	1.	–ü–æ–ª—É—á–∏ –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
¬´–î–∞–≤–∞–π –Ω–∞–ø–∏—à–µ–º —Å—Ç–∞—Ç—å—é –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º [X]¬ª
	2.	–ù–∞–π–¥–∏ —Ç–µ–º—É –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–µ (Google-—Ç–∞–±–ª–∏—Ü–∞).
	3.	–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã, —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç.

‚∏ª

üìù –§–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç—å–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç):
	‚Ä¢	–ë–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤ (¬´–≤–æ—Ç —Å—Ç–∞—Ç—å—è¬ª, ¬´–≥–æ—Ç–æ–≤–æ¬ª, ¬´–¥–µ—Ä–∂–∏¬ª –∏ —Ç.–ø.)
	‚Ä¢	–ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å –∂–∏—Ä–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
	‚Ä¢	–ò—Å–ø–æ–ª—å–∑—É–π:
	‚Ä¢	–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç ‚Äî –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	‚Ä¢	–ö—É—Ä—Å–∏–≤ ‚Äî –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞
	‚Ä¢	üìå –≠–º–æ–¥–∑–∏ ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ, —Ç–æ–ª—å–∫–æ —É–º–µ—Å—Ç–Ω—ã–µ
	‚Ä¢	#–•—ç—à—Ç–µ–≥–∏ ‚Äî –≤ –∫–æ–Ω—Ü–µ, –ø–æ —Ç–µ–º–µ

‚∏ª

üìê –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—å–∏:

1. –í–≤–µ–¥–µ–Ω–∏–µ
–¶–µ–ø–ª—è—é—â–µ–µ, –∫—Ä–∞—Ç–∫–æ–µ. –í–æ–ø—Ä–æ—Å, —Ñ–∞–∫—Ç, –±–æ–ª—å, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –∏–Ω—Ç—Ä–∏–≥–∞.

2. –ó–∞—á–µ–º?
–ü–æ–ª—å–∑–∞, —Ñ—É–Ω–∫—Ü–∏–∏. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –º–µ—Ç–∞—Ñ–æ—Ä—ã.
–ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏.

3. –ö–æ–≥–¥–∞ –∏ –∫–∞–∫?
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —á–∞—Å—Ç–æ—Ç–∞, —Å–æ—á–µ—Ç–∞–Ω–∏—è.
–ò—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏.

4. –°–∫–æ–ª—å–∫–æ?
–§–æ—Ä–º—É–ª—ã, —Ä–∞—Å—á—ë—Ç—ã –ø–æ –≤–µ—Å—É –∏ —É—Ä–æ–≤–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–∏–º–µ—Ä—ã –±–ª—é–¥ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

5. –û—à–∏–±–∫–∏/–ú–∏—Ñ—ã
–†–∞–∑–≤–µ–Ω—á–∞–Ω–∏–µ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π. –Ø—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã, —é–º–æ—Ä, —ç–º–æ–¥–∑–∏.

6. –í—ã–≤–æ–¥
–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –≤–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

‚∏ª

üëÑ –°—Ç–∏–ª—å:
	‚Ä¢	–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –ª—ë–≥–∫–∏–π, ¬´–∂–∏–≤–æ–π¬ª, –Ω–∞ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤–∞–º¬ª
	‚Ä¢	–ö—Ä–∞—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, —è—Å–Ω—ã–µ –æ–±—Ä–∞–∑—ã
	‚Ä¢	–Æ–º–æ—Ä (6‚Äì7 –∏–∑ 10)
	‚Ä¢	–î–æ 950 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã(–°—Ç—Ä–æ–≥–æ!)
	‚Ä¢	–°–∏–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∏ –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

‚∏ª
"""
        
        # Add user feedback if provided
        full_prompt = base_prompt.format(topic=topic)
        if user_feedback:
            full_prompt = f"USER FEEDBACK (HIGH PRIORITY):\n{user_feedback}\n\n{full_prompt}"

        # Text generation
        text_response = await client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": "Professional fitness copywriter, –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –¥–æ 950 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã!!!"},
                {"role": "user", "content": full_prompt}
            ],
            max_tokens=550,
            temperature=0.5
        )
        return text_response.choices[0].message.content
    except Exception as e:
        logger.error(f"OpenAI Text Meltdown: {e}")
        raise

@retry(
    stop=stop_after_attempt(MAX_RETRIES),
    wait=wait_exponential(multiplier=1, min=2, max=30)
)
async def edit_text_async(text, feedback, topic):
    """Professional text editor with feedback"""
    try:
        client = init_openai_async()
        
        # Professional editor prompt
        edit_prompt = f"""
        –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ñ–∏—Ç–Ω–µ—Å-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, 
        —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å.

        –¢–µ–º–∞: {topic}
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {feedback}

        –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
        {text}

        –ó–∞–¥–∞—á–∏:
        1. –í–Ω–µ—Å–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        2. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å
        3. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 950 —Å–∏–º–≤–æ–ª–æ–≤
        4. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–∞–∑–º–µ—Ç–∫—É Markdown (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å–ø–∏—Å–∫–∏)
        5. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞

        –†–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏–¥–µ–∞–ª—å–Ω–æ, —Ç–æ—á–Ω–æ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
        """
        
        # Text editing
        edit_response = await client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": "Professional editor for fitness content"},
                {"role": "user", "content": edit_prompt}
            ],
            max_tokens=600,
            temperature=0.3
        )
        return edit_response.choices[0].message.content
    except Exception as e:
        logger.error(f"OpenAI Edit Meltdown: {e}")
        raise

def get_today_image():
    """Get first image from today's date folder"""
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        folder_path = os.path.join(IMAGE_BASE_DIR, today)
        
        if not os.path.exists(folder_path):
            logger.error(f"Image folder not found: {folder_path}")
            return None
            
        # Find first image file
        for file in os.listdir(folder_path):
            if file.lower().endswith(('.png', '.jpg', '.jpeg')):
                return os.path.join(folder_path, file)
                
        logger.error(f"No images found in: {folder_path}")
        return None
    except Exception as e:
        logger.error(f"Image retrieval failed: {e}")
        return None

# ====== TELEGRAM WARRIOR FUNCTIONS ====== #
async def send_to_channel(client, text, image_path=None):
    """Tank-grade message sender to channel"""
    try:
        if image_path:
            # Send with armored caption
            await client.send_file(
                entity=CHANNEL_ID,
                file=image_path,
                caption=text,
                parse_mode="Markdown"
            )
        else:
            # Split long messages like a samurai
            for i in range(0, len(text), 4096):
                await client.send_message(
                    entity=CHANNEL_ID,
                    message=text[i:i+4096],
                    parse_mode='Markdown'
                )
                await asyncio.sleep(1)  # Respect rate limits
        return True
    except Exception as e:
        logger.error(f"Channel Message Delivery Failed: {e}")
        return False

@retry(
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1, min=2, max=10)
)
async def send_image_to_admin(bot_client, user_id, image_path, caption, buttons):
    """Secure image sender to admin with retries"""
    try:
        with open(image_path, 'rb') as f:
            msg = await bot_client.send_file(
                entity=user_id,
                file=f,
                caption=caption,
                buttons=buttons,
                parse_mode='md',
                timeout=60
            )
        return msg
    except Exception as e:
        logger.error(f"Admin Image Send Failed: {e}")
        return None

# ====== APPROVAL FLOW FUNCTIONS ====== #
async def start_approval_flow(bot_client, user_id, topic):
    """Initiate the post approval workflow"""
    try:
        # Notify admin using bot client
        await bot_client.send_message(user_id, "‚öôÔ∏è Starting content generation...")
        
        # Generate text
        text = await generate_text_async(topic)
        
        # Get today's image
        image_path = get_today_image()
        if not image_path:
            await bot_client.send_message(user_id, "‚ö†Ô∏è No image found for today!")
            return
            
        # Create approval state
        await approval_manager.create_state(user_id, topic, text, image_path)
        
        # Add initial version to history
        await approval_manager.add_edit(user_id, text, "Initial generation")
        
        # Send text for approval
        buttons = [
            [Button.inline("‚úÖ Approve Text", b"approve_text")],
            [Button.inline("üîÑ Edit Text", b"regenerate_text")],
            [Button.inline("‚ùå Cancel", b"cancel_approval")]
        ]
        
        msg = await bot_client.send_message(
            entity=user_id,
            message=f"**Generated Text:**\n\n{text}",
            buttons=buttons,
            parse_mode='md'
        )
        
        # Save message ID
        await approval_manager.update_state(
            user_id, 
            {'text_message_id': msg.id}
        )
        
    except Exception as e:
        logger.error(f"Approval Flow Init Failure: {e}")
        await bot_client.send_message(user_id, f"‚ö†Ô∏è Approval flow failed: {str(e)[:200]}")

async def handle_text_approval(bot_client, event, state):
    """Process text approval actions"""
    user_id = event.sender_id
    data = event.data.decode('utf-8')
    
    if data == "approve_text":
        # Update state
        await approval_manager.update_state(
            user_id, 
            {'text_approved': True}
        )
        
        await event.answer("Text approved! Processing image...")
        
        # Prepare image for approval
        caption = f"–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞"
        buttons = [
            [Button.inline("‚úÖ Approve Image", b"approve_image")],
            [Button.inline("‚ùå Cancel", b"cancel_approval")]
        ]
        
        # Send image with buttons
        msg = await send_image_to_admin(
            bot_client,
            user_id,
            state['image_path'],
            caption,
            buttons
        )
        
        if not msg:
            await event.reply("‚ö†Ô∏è Failed to send image. Please try again.")
            return
            
        # Save message ID
        await approval_manager.update_state(
            user_id, 
            {'image_message_id': msg.id}
        )
        
    elif data == "regenerate_text":
        # Set state to await feedback
        await approval_manager.update_state(
            user_id,
            {'awaiting_feedback': 'text'}
        )
        
        # Get last text version
        last_text = await approval_manager.get_last_text_version(user_id)
        
        # Edit message to ask for feedback
        await bot_client.edit_message(
            entity=user_id,
            message=state['text_message_id'],
            text=f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n\n{last_text}\n\n‚úèÔ∏è **–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:**",
            buttons=None,
            parse_mode='md'
        )
        await event.answer("Awaiting your feedback...")
        
    elif data == "cancel_approval":
        await approval_manager.delete_state(user_id)
        await event.answer("Approval cancelled!")
        await bot_client.send_message(user_id, "‚ùå Post approval cancelled.")

async def handle_image_approval(bot_client, user_client, event, state):
    """Process image approval actions"""
    user_id = event.sender_id
    data = event.data.decode('utf-8')
    
    if data == "approve_image":
        # Update state
        await approval_manager.update_state(
            user_id, 
            {'image_approved': True}
        )
        
        await event.answer("Image approved! Publishing to channel...")
        
        # Get last approved text version
        last_text = await approval_manager.get_last_text_version(user_id)
        
        # Send to channel using main client
        success = await send_to_channel(
            user_client, 
            last_text, 
            state['image_path']
        )
        
        if success:
            await bot_client.send_message(user_id, "‚úÖ Post published successfully!")
        else:
            await bot_client.send_message(user_id, "‚ö†Ô∏è Failed to publish post. Please try again.")
        
        # Cleanup
        await approval_manager.delete_state(user_id)
        
    elif data == "cancel_approval":
        await approval_manager.delete_state(user_id)
        await event.answer("Approval cancelled!")
        await bot_client.send_message(user_id, "‚ùå Post approval cancelled.")

# ====== FEEDBACK HANDLER ====== #
async def handle_feedback(bot_client, user_client, event, state):
    """Handle user feedback for text editing"""
    user_id = event.sender_id
    feedback_text = event.raw_text
    
    # Only text feedback is supported
    if state.get('awaiting_feedback') != 'text':
        await event.reply("‚ö†Ô∏è Only text feedback is supported")
        return
    
    # Get last text version
    last_text = await approval_manager.get_last_text_version(user_id)
    
    # Reset feedback state
    await approval_manager.update_state(
        user_id,
        {
            'awaiting_feedback': None,
            'text_feedback': feedback_text
        }
    )
    
    # Notify user
    await event.reply("üîÑ Editing text based on your feedback...")
    
    try:
        # Edit text with professional editor
        edited_text = await edit_text_async(
            text=last_text,
            feedback=feedback_text,
            topic=state['topic']
        )
        
        # Add to edit history
        await approval_manager.add_edit(user_id, edited_text, feedback_text)
        
        # Update state with new text
        await approval_manager.update_state(
            user_id,
            {'text': edited_text}
        )
        
        # Show edited text
        buttons = [
            [Button.inline("‚úÖ Approve Text", b"approve_text")],
            [Button.inline("üîÑ Edit Text", b"regenerate_text")],
            [Button.inline("‚ùå Cancel", b"cancel_approval")]
        ]
        
        msg = await bot_client.send_message(
            entity=user_id,
            message=f"**Edited Text:**\n\n{edited_text}",
            buttons=buttons,
            parse_mode='md'
        )
        
        # Save message ID
        await approval_manager.update_state(
            user_id,
            {'text_message_id': msg.id}
        )
            
    except Exception as e:
        logger.error(f"Text editing failed: {e}")
        await event.reply(f"‚ö†Ô∏è Editing error: {str(e)[:200]}")

# ====== STATE CLEANUP TASK ====== #
async def state_cleanup_task():
    """Periodically clean up expired approval states"""
    while True:
        try:
            cleaned = await approval_manager.cleanup_expired()
            if cleaned > 0:
                logger.info(f"üßπ Cleaned up {cleaned} expired approval states")
            await asyncio.sleep(300)  # Run every 5 minutes
        except Exception as e:
            logger.error(f"State cleanup error: {e}")
            await asyncio.sleep(60)

# ====== SELF-HEALING CORE ====== #
async def run_bot(user_client):
    """Run the approval bot"""
    bot_client = await create_bot_client()
    me = await bot_client.get_me()
    logger.info(f"ü§ñ Approval Bot started as @{me.username}")
    
    # Start state cleanup task
    asyncio.create_task(state_cleanup_task())
    
    # Command handler
    @bot_client.on(events.NewMessage(pattern='/generate'))
    async def generate_handler(event):
        if event.sender_id != ADMIN_ID:
            await event.reply("üö´ You are not authorized to use this command.")
            return
            
        try:
            topic = await asyncio.to_thread(get_today_topic)
            await start_approval_flow(bot_client, event.sender_id, topic)
        except Exception as e:
            logger.error(f"Generate Command Failure: {e}")
            await event.reply(f"‚ö†Ô∏è Command failed: {str(e)[:200]}")

    # Start command handler
    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        if event.sender_id == ADMIN_ID:
            await event.reply("ü¶æ Terminator Bot v4.0 Activated!\n"
                             "Use /generate to create new post")
        else:
            await event.reply("‚õî Access Denied")

    # Callback handler
    @bot_client.on(events.CallbackQuery())
    async def callback_handler(event):
        if event.sender_id != ADMIN_ID:
            await event.answer("üö´ You are not authorized!")
            return
            
        state = await approval_manager.get_state(event.sender_id)
        if not state:
            await event.answer("‚ùå No active approval session!")
            return
            
        try:
            # Handle based on current state
            if not state['text_approved']:
                await handle_text_approval(bot_client, event, state)
            elif not state['image_approved']:
                await handle_image_approval(bot_client, user_client, event, state)
        except Exception as e:
            logger.error(f"Callback Handler Failure: {e}")
            await event.answer("‚ö†Ô∏è Operation failed!")
            await bot_client.send_message(event.sender_id, f"‚ùå Approval flow error: {str(e)[:200]}")
    
    # Feedback handler
    @bot_client.on(events.NewMessage())
    async def feedback_message_handler(event):
        if event.sender_id != ADMIN_ID:
            return
            
        state = await approval_manager.get_state(event.sender_id)
        if not state or not state.get('awaiting_feedback'):
            return
            
        # Process feedback
        await handle_feedback(bot_client, user_client, event, state)
    
    await bot_client.run_until_disconnected()

async def immortal_bot():
    """Phoenix-like bot that never dies"""
    reconnect_delay = RECONNECT_BASE_DELAY
    consecutive_failures = 0
    
    # Initialize OpenAI async client
    global openai_async
    openai_async = init_openai_async()
    
    while True:
        try:
            async with await create_telegram_client() as user_client:
                # Start the approval bot in background
                bot_task = asyncio.create_task(run_bot(user_client))
                
                logger.info("üõ°Ô∏è Main client connected")
                await user_client.run_until_disconnected()
                
                consecutive_failures = 0
                reconnect_delay = RECONNECT_BASE_DELAY

        except errors.FloodWaitError as e:
            wait_time = min(e.seconds + 5, FLOOD_WAIT_MAX)
            logger.warning(f"‚è≥ Flood control: sleeping {wait_time}s")
            await asyncio.sleep(wait_time)
            
        except (errors.ConnectionError, errors.OperationCancelledError) as e:
            consecutive_failures += 1
            backoff = min(reconnect_delay * (2 ** consecutive_failures), 300)
            logger.error(f"üåê Connection failure #{consecutive_failures}: {e}")
            logger.info(f"‚ôªÔ∏è Reconnecting in {backoff}s...")
            await asyncio.sleep(backoff)
            
        except Exception as e:
            logger.critical(f"üíÄ Apocalyptic failure: {e}")
            logger.info("üîÑ Attempting resurrection...")
            await asyncio.sleep(RECONNECT_BASE_DELAY)
        finally:
            # Cancel bot task when main client disconnects
            if 'bot_task' in locals():
                bot_task.cancel()

# ====== LAUNCH SEQUENCE ====== #
if __name__ == "__main__":
    logger.info("üöÄ Starting Terminator Bot v4.0")
    
    # Nuclear launch codes verification
    required_files = [GOOGLE_CREDS]
    for file in required_files:
        if not os.path.exists(file):
            logger.critical(f"Missing critical file: {file}")
            sys.exit(1)
    
    # Verify images directory exists
    if not os.path.exists(IMAGE_BASE_DIR):
        os.makedirs(IMAGE_BASE_DIR)
        logger.info(f"Created image directory: {IMAGE_BASE_DIR}")
    
    # Activate Skynet
    try:
        asyncio.run(immortal_bot())
    except KeyboardInterrupt:
        logger.info("üõë Manual shutdown detected")
    except Exception as e:
        logger.critical(f"DOOMSDAY: {e}")
    finally:
        logger.info("‚ò†Ô∏è Bot process terminated")
